#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>


#define MEM_SIZE (0x8000)


#define TRUE -1
#define FALSE 0

#define MASK_VIS (1<<7)
#define MASK_IMM (1<<6)
#define WORD_LEN (0x1f)

#define CELL_SIZE ((cell) sizeof(cell))
#define CFUN_SIZE ((cell) sizeof(fun))


typedef struct VM VM;
typedef enum power power;
typedef enum state state;
typedef void (*fun)(VM *vm);

typedef signed short cell;
typedef unsigned char byte;

typedef enum prim prim;


enum power {
    OFF,
    ON,
};

enum state {
    INTERPRET,
    COMPILE,
};

struct VM {
    power p;
    state s;
    FILE *i;
    FILE *o;

    cell ps[0x100];
    byte psp;

    cell rs[0x100];
    byte rsp;

    byte mem[MEM_SIZE];
    cell ip;
    cell hp;
    cell lp;
};

enum prim {
    NOP = ((cell) MEM_SIZE),
    LIT, HALT,

    DUP, DROP, SWAP,
    PUSH, POP,
    PICKP, PICKR,

    JMP, JZ, RET,

    EQ, NEQ, LT, GT,

    AND, OR, XOR,
    SHR, SHL,

    ADD, SUB, MUL,
    DIV, MOD,

    LDC, STRC,
    LDB, STRB,

    LDS, STRS,

    LDP, STRP,
    LDR, STRR,

    LDI, STRI,
    LDH, STRH,
    LDL, STRL,

    CSZ, CFUN,
    KEY, EMIT, /*CALL,*/
};


cell find_word(VM *vm, char *buf) {
    cell addr;
    byte flags;
    cell len;
    for(addr = vm->lp; addr != 0; addr = *((cell *) &(vm->mem[addr]))) {
        flags = vm->mem[addr + CELL_SIZE];
        len = strlen(buf);
        if((flags & MASK_VIS) && len == (flags & WORD_LEN))
            if(strncmp(buf, (char *) &(vm->mem[addr + CELL_SIZE + 1]), len) == 0)
                return addr;
    }
    return addr;
}

void print_opcode(VM *vm, cell opcode) {
    switch(opcode) {
    case NOP:
        printf("NOP ");
        break;
    case LIT:
        printf("LIT ");
        break;
    case HALT:
        printf("HALT ");
        break;
    case DUP:
        printf("DUP ");
        break;
    case DROP:
        printf("DROP ");
        break;
    case SWAP:
        printf("SWAP ");
        break;
    case PUSH:
        printf("PUSH ");
        break;
    case POP:
        printf("POP ");
        break;
    case PICKP:
        printf("PICKP ");
        break;
    case PICKR:
        printf("PICKR ");
        break;
    case JMP:
        printf("JMP ");
        break;
    case JZ:
        printf("JZ ");
        break;
    case RET:
        printf("RET ");
        break;
    case EQ:
        printf("EQ ");
        break;
    case NEQ:
        printf("NEQ ");
        break;
    case LT:
        printf("LT ");
        break;
    case GT:
        printf("GT ");
        break;
    case AND:
        printf("AND ");
        break;
    case OR:
        printf("OR ");
        break;
    case XOR:
        printf("XOR ");
        break;
    case SHR:
        printf("SHR ");
        break;
    case SHL:
        printf("SHL ");
        break;
    case ADD:
        printf("ADD ");
        break;
    case SUB:
        printf("SUB ");
        break;
    case MUL:
        printf("MUL ");
        break;
    case DIV:
        printf("DIV ");
        break;
    case MOD:
        printf("MOD ");
        break;
    case LDC:
        printf("LDC ");
        break;
    case STRC:
        printf("STRC ");
        break;
    case LDB:
        printf("LDB ");
        break;
    case STRB:
        printf("STRB ");
        break;
    case LDS:
        printf("LDS ");
        break;
    case STRS:
        printf("STRS ");
        break;
    case LDP:
        printf("LDP ");
        break;
    case STRP:
        printf("STRP ");
        break;
    case LDR:
        printf("LDR ");
        break;
    case STRR:
        printf("STRR ");
        break;
    case LDI:
        printf("LDI ");
        break;
    case STRI:
        printf("STRI ");
        break;
        case LDH:
        printf("LDH ");
        break;
    case STRH:
        printf("STRH ");
        break;
    case LDL:
        printf("LDL ");
        break;
    case STRL:
        printf("STRL ");
        break;
    case CSZ:
        printf("CSZ ");
        break;
    case CFUN:
        printf("CFUN ");
        break;
    case KEY:
        printf("KEY ");
        break;
    case EMIT:
        printf("EMIT ");
        break;
    default: {
        cell addr = vm->mem[opcode];
        printf("%.*s ", vm->mem[addr+CELL_SIZE] & WORD_LEN, &(vm->mem[addr+CELL_SIZE+1]));
    }

    }
}
void print_word(VM *vm, cell addr) {
    printf("0x%04x : %.*s : %s%s\n", addr,
           vm->mem[addr+CELL_SIZE] & WORD_LEN, &(vm->mem[addr+CELL_SIZE+1]),
           vm->mem[addr+CELL_SIZE] & MASK_VIS ? "VIS ": "",
           vm->mem[addr+CELL_SIZE] & MASK_IMM ? "IMM ": "");
    addr += CELL_SIZE + 1 + (vm->mem[addr+CELL_SIZE] & WORD_LEN);
    do {
        print_opcode(vm, *((cell *) &vm->mem[addr]));

        if(*((cell *) &vm->mem[addr]) == LIT) {
            addr += CELL_SIZE;
            printf("%i ", *((cell *) &vm->mem[addr]));
        } else if(*((cell *) &vm->mem[addr]) == CFUN) {
            addr += CFUN_SIZE;
        }

        addr += CELL_SIZE;


    } while(/*addr != find_word(vm, "RET") &&*/ *((cell *) &vm->mem[addr]) != RET);
    puts("");
}


#include "debug.h"


#include "prims.h"


#include "run.h"


#include "words.h"


#include "interp.h"








